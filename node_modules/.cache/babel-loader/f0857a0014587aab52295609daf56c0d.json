{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documents/projects/sd-011-project-recipes-app/src/components/SearchBar.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { executeSearch, updateQuery, updateSelectedFilter } from '../redux/actions/searchBarActions';\nimport { foodListSuccess } from '../redux/actions/foodActions';\n\nclass SearchBar extends Component {\n  constructor() {\n    super();\n    this.handleSearchClick = this.handleSearchClick.bind(this);\n    this.checkResults = this.checkResults.bind(this);\n  }\n\n  checkResults() {\n    const {\n      searchResults,\n      history,\n      saveFoodList\n    } = this.props;\n\n    if (searchResults === null) {\n      console.log(searchResults);\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n      return;\n    } else if (searchResults.length === 1) {\n      history.push(`/comidas/${searchResults[0].idMeal}`);\n      return;\n    }\n\n    saveFoodList(searchResults);\n  }\n\n  async handleSearchClick() {\n    const {\n      query,\n      selectedFilter,\n      executeSearchAction\n    } = this.props;\n\n    if (selectedFilter === 'firstLetter' && query.length !== 1) {\n      alert('Sua busca deve conter somente 1 (um) caracter');\n      return;\n    }\n\n    await executeSearchAction(query, selectedFilter);\n    this.checkResults();\n  }\n\n  render() {\n    const {\n      queryAction,\n      selectedFilterAction,\n      query,\n      history\n    } = this.props;\n    console.log(history.location.pathname);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      \"data-testid\": \"search-input\",\n      placeholder: \"Fa\\xE7a sua pequisa\",\n      value: query,\n      onChange: ({\n        target\n      }) => queryAction(target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search-ingredient\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"Ingrediente:\", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"filter\",\n      id: \"search-ingredient\",\n      value: \"ingredient\",\n      type: \"radio\",\n      \"data-testid\": \"ingredient-search-radio\",\n      onChange: () => selectedFilterAction(\"ingredient\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search-nome\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"Nome:\", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"filter\",\n      id: \"search-nome\",\n      value: \"name\",\n      type: \"radio\",\n      \"data-testid\": \"name-search-radio\",\n      onChange: () => selectedFilterAction(\"name\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search-first-letter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, \"Primeira Letra:\", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"filter\",\n      id: \"search-first-letter\",\n      value: \"firstLetter\",\n      type: \"radio\",\n      \"data-testid\": \"first-letter-search-radio\",\n      onChange: () => selectedFilterAction(\"firstLetter\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"exec-search-btn\",\n      onClick: () => this.handleSearchClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"Buscar\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  query: state.searchBarReducer.query,\n  selectedFilter: state.searchBarReducer.selectedFilter,\n  searchResults: state.searchBarReducer.searchResults\n});\n\nconst mapDispatchToProps = dispatch => ({\n  queryAction: query => dispatch(updateQuery(query)),\n  selectedFilterAction: filter => dispatch(updateSelectedFilter(filter)),\n  executeSearchAction: (query, filter) => dispatch(executeSearch(query, filter)),\n  saveFoodList: results => dispatch(foodListSuccess(results))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchBar));","map":{"version":3,"sources":["/home/rafael/Documents/projects/sd-011-project-recipes-app/src/components/SearchBar.js"],"names":["React","Component","withRouter","connect","executeSearch","updateQuery","updateSelectedFilter","foodListSuccess","SearchBar","constructor","handleSearchClick","bind","checkResults","searchResults","history","saveFoodList","props","console","log","alert","length","push","idMeal","query","selectedFilter","executeSearchAction","render","queryAction","selectedFilterAction","location","pathname","target","value","mapStateToProps","state","searchBarReducer","mapDispatchToProps","dispatch","filter","results"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,oBAArC,QAAiE,mCAAjE;AACA,SAASC,eAAT,QAAgC,8BAAhC;;AAEA,MAAMC,SAAN,SAAwBP,SAAxB,CAAkC;AAChCQ,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAM;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA,OAAjB;AAA0BC,MAAAA;AAA1B,QAA2C,KAAKC,KAAtD;;AACA,QAAGH,aAAa,KAAK,IAArB,EAA0B;AACxBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ;AACAM,MAAAA,KAAK,CAAC,kEAAD,CAAL;AACA;AACD,KAJD,MAIO,IAAIN,aAAa,CAACO,MAAd,KAAyB,CAA7B,EAAgC;AACrCN,MAAAA,OAAO,CAACO,IAAR,CAAc,YAAWR,aAAa,CAAC,CAAD,CAAb,CAAiBS,MAAO,EAAjD;AACA;AACD;;AACDP,IAAAA,YAAY,CAACF,aAAD,CAAZ;AACD;;AAGD,QAAMH,iBAAN,GAA0B;AACxB,UAAM;AAAEa,MAAAA,KAAF;AAASC,MAAAA,cAAT;AAAyBC,MAAAA;AAAzB,QAAiD,KAAKT,KAA5D;;AACA,QAAGQ,cAAc,KAAK,aAAnB,IAAoCD,KAAK,CAACH,MAAN,KAAiB,CAAxD,EAA0D;AACxDD,MAAAA,KAAK,CAAC,+CAAD,CAAL;AACA;AACD;;AACD,UAAMM,mBAAmB,CAACF,KAAD,EAAQC,cAAR,CAAzB;AACA,SAAKZ,YAAL;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,oBAAf;AAAqCL,MAAAA,KAArC;AAA4CT,MAAAA;AAA5C,QAAwD,KAAKE,KAAnE;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACe,QAAR,CAAiBC,QAA7B;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,qBAAY,cAFd;AAGE,MAAA,WAAW,EAAC,qBAHd;AAIE,MAAA,KAAK,EAAGP,KAJV;AAKE,MAAA,QAAQ,EAAE,CAAC;AAACQ,QAAAA;AAAD,OAAD,KAAaJ,WAAW,CAACI,MAAM,CAACC,KAAR,CALpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAQE;AAAO,MAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAEE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,EAAE,EAAC,mBAFL;AAGE,MAAA,KAAK,EAAC,YAHR;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,qBAAY,yBALd;AAME,MAAA,QAAQ,EAAE,MAAKJ,oBAAoB,CAAC,YAAD,CANrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CARF,eAmBE;AAAO,MAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,EAAE,EAAC,aAFL;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,qBAAY,mBALd;AAME,MAAA,QAAQ,EAAE,MAAKA,oBAAoB,CAAC,MAAD,CANrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAnBF,eA8BE;AAAO,MAAA,OAAO,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAEE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,EAAE,EAAC,qBAFL;AAGE,MAAA,KAAK,EAAC,aAHR;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,qBAAY,2BALd;AAME,MAAA,QAAQ,EAAE,MAAKA,oBAAoB,CAAC,aAAD,CANrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CA9BF,eAyCE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,qBAAY,iBAFd;AAGG,MAAA,OAAO,EAAG,MAAM,KAAKlB,iBAAL,EAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzCF,CADF;AAmDD;;AArF+B;;AAwFlC,MAAMuB,eAAe,GAAIC,KAAD,KAAY;AAClCX,EAAAA,KAAK,EAAEW,KAAK,CAACC,gBAAN,CAAuBZ,KADI;AAElCC,EAAAA,cAAc,EAAEU,KAAK,CAACC,gBAAN,CAAuBX,cAFL;AAGlCX,EAAAA,aAAa,EAAEqB,KAAK,CAACC,gBAAN,CAAuBtB;AAHJ,CAAZ,CAAxB;;AAMA,MAAMuB,kBAAkB,GAAIC,QAAD,KAAe;AACxCV,EAAAA,WAAW,EAAGJ,KAAD,IAAWc,QAAQ,CAAChC,WAAW,CAACkB,KAAD,CAAZ,CADQ;AAExCK,EAAAA,oBAAoB,EAAGU,MAAD,IAAYD,QAAQ,CAAC/B,oBAAoB,CAACgC,MAAD,CAArB,CAFF;AAGxCb,EAAAA,mBAAmB,EAAE,CAACF,KAAD,EAAQe,MAAR,KAAmBD,QAAQ,CAACjC,aAAa,CAACmB,KAAD,EAAQe,MAAR,CAAd,CAHR;AAIxCvB,EAAAA,YAAY,EAAGwB,OAAD,IAAaF,QAAQ,CAAC9B,eAAe,CAACgC,OAAD,CAAhB;AAJK,CAAf,CAA3B;;AAOA,eAAepC,OAAO,CAAC8B,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ClC,UAAU,CAACM,SAAD,CAAvD,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { executeSearch, updateQuery, updateSelectedFilter } from '../redux/actions/searchBarActions';\nimport { foodListSuccess } from '../redux/actions/foodActions';\n\nclass SearchBar extends Component {\n  constructor() {\n    super();\n    this.handleSearchClick = this.handleSearchClick.bind(this);\n    this.checkResults = this.checkResults.bind(this);\n  }\n\n  checkResults() {\n    const { searchResults, history, saveFoodList } = this.props;\n    if(searchResults === null){\n      console.log(searchResults);\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n      return;\n    } else if (searchResults.length === 1) {\n      history.push(`/comidas/${searchResults[0].idMeal}`);\n      return;\n    }\n    saveFoodList(searchResults);\n  }\n  \n\n  async handleSearchClick() { \n    const { query, selectedFilter, executeSearchAction } = this.props;\n    if(selectedFilter === 'firstLetter' && query.length !== 1){\n      alert('Sua busca deve conter somente 1 (um) caracter');\n      return;\n    }\n    await executeSearchAction(query, selectedFilter);\n    this.checkResults();\n  }\n\n  render() {\n    const { queryAction, selectedFilterAction, query, history } = this.props;\n    console.log(history.location.pathname);\n    return (\n      <div>\n        <input\n          type=\"text\"\n          data-testid=\"search-input\"\n          placeholder=\"Faça sua pequisa\"\n          value={ query }\n          onChange={({target})=> queryAction(target.value) }\n        />\n        <label htmlFor=\"search-ingredient\">\n          Ingrediente:\n          <input\n            name=\"filter\"\n            id=\"search-ingredient\"\n            value=\"ingredient\"\n            type=\"radio\"\n            data-testid=\"ingredient-search-radio\"\n            onChange={()=> selectedFilterAction(\"ingredient\")}\n          />\n        </label>\n        <label htmlFor=\"search-nome\">\n          Nome:\n          <input\n            name=\"filter\"\n            id=\"search-nome\"\n            value=\"name\"\n            type=\"radio\"\n            data-testid=\"name-search-radio\"\n            onChange={()=> selectedFilterAction(\"name\")}\n          />\n        </label>\n        <label htmlFor=\"search-first-letter\">\n          Primeira Letra:\n          <input\n            name=\"filter\"\n            id=\"search-first-letter\"\n            value=\"firstLetter\"\n            type=\"radio\"\n            data-testid=\"first-letter-search-radio\"\n            onChange={()=> selectedFilterAction(\"firstLetter\")}\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"exec-search-btn\"\n           onClick={ () => this.handleSearchClick() }\n        >\n          Buscar\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  query: state.searchBarReducer.query,\n  selectedFilter: state.searchBarReducer.selectedFilter,\n  searchResults: state.searchBarReducer.searchResults,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  queryAction: (query) => dispatch(updateQuery(query)),\n  selectedFilterAction: (filter) => dispatch(updateSelectedFilter(filter)),\n  executeSearchAction: (query, filter) => dispatch(executeSearch(query, filter)),\n  saveFoodList: (results) => dispatch(foodListSuccess(results)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchBar));\n"]},"metadata":{},"sourceType":"module"}