{"ast":null,"code":"import _classCallCheck from\"/home/rafael/Documents/projects/Recipes-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/rafael/Documents/projects/Recipes-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/rafael/Documents/projects/Recipes-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/rafael/Documents/projects/Recipes-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/rafael/Documents/projects/Recipes-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{connect}from'react-redux';import{saveFavoriteRecipe,removeFavoriteRecipe}from'../redux/actions/foodActions';import whiteHeartIcon from\"../images/whiteHeartIcon.svg\";import blackHeartIcon from\"../images/blackHeartIcon.svg\";var FavoriteButton=/*#__PURE__*/function(_Component){_inherits(FavoriteButton,_Component);var _super=_createSuper(FavoriteButton);function FavoriteButton(){var _this;_classCallCheck(this,FavoriteButton);_this=_super.call(this);_this.state={whiteHeart:true};_this.handleFavoriteClick=_this.handleFavoriteClick.bind(_assertThisInitialized(_this));_this.setFavoriteIcon=_this.setFavoriteIcon.bind(_assertThisInitialized(_this));return _this;}_createClass(FavoriteButton,[{key:\"componentDidMount\",value:function componentDidMount(){this.handleHeart();var id=this.props.id;var favoriteMeals=JSON.parse(localStorage.getItem('favoriteRecipes'));if(favoriteMeals&&favoriteMeals.find(function(item){return item.id===id;})){this.setFavoriteIcon();}}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this.handleHeart();}},{key:\"handleHeart\",value:function handleHeart(){var id=this.props.id;var whiteHeart=this.state.whiteHeart;var favoriteMeals=JSON.parse(localStorage.getItem('favoriteRecipes'));if(whiteHeart&&favoriteMeals&&favoriteMeals.find(function(item){return item.id===id;})){this.setFavoriteIcon();}}},{key:\"handleFavoriteClick\",value:function handleFavoriteClick(){var _this$props=this.props,favoriteRecipes=_this$props.favoriteRecipes,id=_this$props.id,removeRecipes=_this$props.removeRecipes;var whiteHeart=this.state.whiteHeart;if(whiteHeart===true){favoriteRecipes(id);}if(whiteHeart===false){removeRecipes(id);}this.setState(function(prevState){return{whiteHeart:!prevState.whiteHeart};});}},{key:\"setFavoriteIcon\",value:function setFavoriteIcon(){this.setState({whiteHeart:false});}},{key:\"render\",value:function render(){var _this2=this;var whiteHeart=this.state.whiteHeart;var test=this.props.test;return/*#__PURE__*/React.createElement(\"button\",{className:\"button\",type:\"button\",onClick:function onClick(){return _this2.handleFavoriteClick();}},/*#__PURE__*/React.createElement(\"img\",{\"data-testid\":test,src:whiteHeart?whiteHeartIcon:blackHeartIcon,alt:\"favorite food button\",width:\"120%\"}));}}]);return FavoriteButton;}(Component);var mapDispatchToProps=function mapDispatchToProps(dispatch){return{favoriteRecipes:function favoriteRecipes(id){return dispatch(saveFavoriteRecipe(id));},removeRecipes:function removeRecipes(id){return dispatch(removeFavoriteRecipe(id));}};};export default connect(null,mapDispatchToProps)(FavoriteButton);","map":{"version":3,"sources":["/home/rafael/Documents/projects/Recipes-App/src/components/FavoriteButton.js"],"names":["React","Component","connect","saveFavoriteRecipe","removeFavoriteRecipe","FavoriteButton","state","whiteHeart","handleFavoriteClick","bind","setFavoriteIcon","handleHeart","id","props","favoriteMeals","JSON","parse","localStorage","getItem","find","item","favoriteRecipes","removeRecipes","setState","prevState","test","whiteHeartIcon","blackHeartIcon","mapDispatchToProps","dispatch"],"mappings":"0yBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,OAASC,kBAAT,CAA6BC,oBAA7B,KAAyD,8BAAzD,C,qHAIMC,CAAAA,c,gHACJ,yBAAc,gDACZ,wBAEA,MAAKC,KAAL,CAAa,CACXC,UAAU,CAAE,IADD,CAAb,CAIA,MAAKC,mBAAL,CAA2B,MAAKA,mBAAL,CAAyBC,IAAzB,+BAA3B,CACA,MAAKC,eAAL,CAAuB,MAAKA,eAAL,CAAqBD,IAArB,+BAAvB,CARY,aASb,C,wFAEmB,CAClB,KAAKE,WAAL,GADkB,GAEVC,CAAAA,EAFU,CAEH,KAAKC,KAFF,CAEVD,EAFU,CAGlB,GAAME,CAAAA,aAAa,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAtB,CACA,GAAIJ,aAAa,EAAIA,aAAa,CAACK,IAAd,CAAmB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACR,EAAL,GAAYA,EAAtB,EAAnB,CAArB,CAAmE,CACjE,KAAKF,eAAL,GACD,CACF,C,+DAEoB,CACnB,KAAKC,WAAL,GACD,C,iDAEa,IACJC,CAAAA,EADI,CACG,KAAKC,KADR,CACJD,EADI,IAEJL,CAAAA,UAFI,CAEW,KAAKD,KAFhB,CAEJC,UAFI,CAGZ,GAAMO,CAAAA,aAAa,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAtB,CACA,GAAIX,UAAU,EAAIO,aAAd,EAA+BA,aAAa,CAACK,IAAd,CAAmB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACR,EAAL,GAAYA,EAAtB,EAAnB,CAAnC,CAAiF,CAC/E,KAAKF,eAAL,GACD,CACF,C,iEAEqB,iBAC2B,KAAKG,KADhC,CACZQ,eADY,aACZA,eADY,CACKT,EADL,aACKA,EADL,CACSU,aADT,aACSA,aADT,IAEZf,CAAAA,UAFY,CAEG,KAAKD,KAFR,CAEZC,UAFY,CAGpB,GAAIA,UAAU,GAAK,IAAnB,CAAyB,CACvBc,eAAe,CAACT,EAAD,CAAf,CACD,CACD,GAAIL,UAAU,GAAK,KAAnB,CAA0B,CACxBe,aAAa,CAACV,EAAD,CAAb,CACD,CACD,KAAKW,QAAL,CAAc,SAACC,SAAD,QAAgB,CAC5BjB,UAAU,CAAE,CAACiB,SAAS,CAACjB,UADK,CAAhB,EAAd,EAGD,C,yDAEiB,CAChB,KAAKgB,QAAL,CAAc,CACZhB,UAAU,CAAE,KADA,CAAd,EAGD,C,uCAEQ,oBACCA,CAAAA,UADD,CACgB,KAAKD,KADrB,CACCC,UADD,IAECkB,CAAAA,IAFD,CAEU,KAAKZ,KAFf,CAECY,IAFD,CAGP,mBACE,8BACE,SAAS,CAAC,QADZ,CAEE,IAAI,CAAC,QAFP,CAGE,OAAO,CAAG,yBAAM,CAAA,MAAI,CAACjB,mBAAL,EAAN,EAHZ,eAKE,2BACE,cAAciB,IADhB,CAEE,GAAG,CAAGlB,UAAU,CAAGmB,cAAH,CAAoBC,cAFtC,CAGE,GAAG,CAAC,sBAHN,CAIE,KAAK,CAAC,MAJR,EALF,CADF,CAcD,C,4BAvE0B1B,S,EA0E7B,GAAM2B,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,QAAe,CACxCR,eAAe,CAAE,yBAACT,EAAD,QAAQiB,CAAAA,QAAQ,CAAC1B,kBAAkB,CAACS,EAAD,CAAnB,CAAhB,EADuB,CAExCU,aAAa,CAAE,uBAACV,EAAD,QAAQiB,CAAAA,QAAQ,CAACzB,oBAAoB,CAACQ,EAAD,CAArB,CAAhB,EAFyB,CAAf,EAA3B,CAWA,cAAeV,CAAAA,OAAO,CAAC,IAAD,CAAO0B,kBAAP,CAAP,CAAkCvB,cAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveFavoriteRecipe, removeFavoriteRecipe } from '../redux/actions/foodActions';\nimport whiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport blackHeartIcon from '../images/blackHeartIcon.svg';\n\nclass FavoriteButton extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      whiteHeart: true,\n    };\n\n    this.handleFavoriteClick = this.handleFavoriteClick.bind(this);\n    this.setFavoriteIcon = this.setFavoriteIcon.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleHeart();\n    const { id } = this.props;\n    const favoriteMeals = JSON.parse(localStorage.getItem('favoriteRecipes'));\n    if (favoriteMeals && favoriteMeals.find((item) => item.id === id)) {\n      this.setFavoriteIcon();\n    }\n  }\n\n  componentDidUpdate() {\n    this.handleHeart();\n  }\n\n  handleHeart() {\n    const { id } = this.props;\n    const { whiteHeart } = this.state;\n    const favoriteMeals = JSON.parse(localStorage.getItem('favoriteRecipes'));\n    if (whiteHeart && favoriteMeals && favoriteMeals.find((item) => item.id === id)) {\n      this.setFavoriteIcon();\n    }\n  }\n\n  handleFavoriteClick() {\n    const { favoriteRecipes, id, removeRecipes } = this.props;\n    const { whiteHeart } = this.state;\n    if (whiteHeart === true) {\n      favoriteRecipes(id);\n    }\n    if (whiteHeart === false) {\n      removeRecipes(id);\n    }\n    this.setState((prevState) => ({\n      whiteHeart: !prevState.whiteHeart,\n    }));\n  }\n\n  setFavoriteIcon() {\n    this.setState({\n      whiteHeart: false,\n    });\n  }\n\n  render() {\n    const { whiteHeart } = this.state;\n    const { test } = this.props;\n    return (\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={ () => this.handleFavoriteClick() }\n      >\n        <img\n          data-testid={ test }\n          src={ whiteHeart ? whiteHeartIcon : blackHeartIcon }\n          alt=\"favorite food button\"\n          width=\"120%\"\n        />\n      </button>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  favoriteRecipes: (id) => dispatch(saveFavoriteRecipe(id)),\n  removeRecipes: (id) => dispatch(removeFavoriteRecipe(id)),\n});\n\nFavoriteButton.propTypes = {\n  id: PropTypes.number,\n  favoriteRecipes: PropTypes.func,\n  removeRecipes: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(FavoriteButton);\n"]},"metadata":{},"sourceType":"module"}